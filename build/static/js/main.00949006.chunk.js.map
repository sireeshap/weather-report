{"version":3,"sources":["APIService/APIService.js","components/weather-display.js","components/weather-report.js","App.js","serviceWorker.js","index.js"],"names":["cityelement","a","response","fetch","result","ok","json","WeatherDisplay","props","weatherReports","reports","scope","rownumber","countryCode","name","weather","description","main","temp","kelvinCode","celsius","Math","floor","toString","tempuratureConverter","timezone","utcTimeOffset","date","Date","getTime","getUTCHours","getUTCMinutes","getUTCSeconds","timezoneConvert","countryCodes","WhetherReport","state","countryInputs","isError","getWeatherReports","reportStack","this","map","element","APIService","then","data","cod","Object","assign","push","length","setState","catch","error","reportsRows","forEach","reportData","key","arrayInputs","item","className","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.00949006.chunk.js","sourcesContent":["/* Description: This will make API calls to server and will return data to components */\r\nexport default async function APIService(cityelement) {\r\n    try {\r\n      let response='';\r\n      /* In real time we need to set api string and API token in environment variable in .env file. \r\n      then below line will help to hide confidential information*/\r\n      // let result = await fetch(process.env.REACT_APP_API_URL + cityelement + '&appid='+REACT_APP_API_URL);\r\n        \r\n      let result = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' + cityelement + '&appid=f9b14f353ab97350fc4e49e9773415da');\r\n        if (result.ok) {\r\n            response = await result.json()\r\n            return response\r\n        } else {\r\n            response = await result.json()\r\n            return response\r\n        }\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n","/* Description: This will display Weather reports information in table \r\nand do necessaru conversions*/\r\nimport React from 'react';\r\n\r\nexport default function WeatherDisplay(props) {\r\n    let weatherReports = props.reports;\r\n    let timezoneConvert = (utcTimeOffset) => {\r\n        let date = new Date(new Date().getTime() + (utcTimeOffset * 1000));\r\n        let hrs = date.getUTCHours();\r\n        let mins = date.getUTCMinutes();\r\n        let secs = date.getUTCSeconds();\r\n        return (hrs + \":\" + mins + \":\" + secs).toString()\r\n    }\r\n    let tempuratureConverter = (kelvinCode) => {\r\n      const celsius = kelvinCode - 273;\r\n      let fahrenheit = Math.floor(celsius * (9/5) + 32);\r\n      return (fahrenheit.toString()+ '\\u{00B0}F')\r\n    }\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{props.rownumber + 1}</th>\r\n            <td>{weatherReports.countryCode}</td>\r\n            <td>{weatherReports.name}</td>\r\n            <td>{weatherReports.weather[0].description}</td>\r\n            <td>{weatherReports.main.temp!=='Not found' ? tempuratureConverter(weatherReports.main.temp): '-'}</td>\r\n            <td>{weatherReports.timezone !== 'Not found' ? timezoneConvert(weatherReports.timezone) : '-'}</td>\r\n        </tr>\r\n    )\r\n}","/* Description: This will get Weather reports for given array of input \r\ncountry code using API service*/\r\nimport React, {Component} from 'react';\r\nimport APIService from './../APIService/APIService';\r\nimport WeatherDisplay from './weather-display';\r\n\r\nconst countryCodes = [ 'London', 'Tokyo', 10005, 'Pluto', 10345, 77777];\r\nexport default class WhetherReport extends Component {\r\n\r\n    getWeatherReports() {\r\n        let reportStack = [];\r\n        this\r\n            .state\r\n            .countryInputs\r\n            .map((element) => {\r\n                APIService(element).then((data) => {\r\n                    if (data.cod === 200) {\r\n                        data=Object.assign({'countryCode':element}, data)\r\n                        reportStack.push(data);\r\n                    } else {\r\n                        reportStack.push({\r\n                            name: 'Not found',\r\n                            countryCode: element,\r\n                            weather: [\r\n                                {\r\n                                    description: 'Not found'\r\n                                }\r\n                            ],\r\n                            main: {\r\n                                temp: 'Not found'\r\n                            },\r\n                            timezone: 'Not found'\r\n                        })\r\n                    }\r\n                    if (reportStack.length === this.state.countryInputs.length) {\r\n                        this.setState({\r\n                            reports: reportStack\r\n                        }, () => {\r\n                            return this.state.reports\r\n                        })\r\n                    }\r\n                }).catch(error => {\r\n                    this.setState({isError:true});\r\n                })\r\n            })\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countryInputs: countryCodes,\r\n            reports: [],\r\n            isError: false\r\n        }\r\n        this.getWeatherReports()\r\n    }\r\n    render() {\r\n        let reportsRows = [];\r\n        if(!this.state.isError){\r\n        this\r\n            .state\r\n            .reports\r\n            .forEach((reportData, key) => {\r\n                reportsRows.push(\r\n                    <WeatherDisplay key={key} rownumber={key} reports={reportData}></WeatherDisplay>\r\n                )\r\n            })\r\n          }\r\n        let arrayInputs = [];\r\n        this\r\n            .state\r\n            .countryInputs\r\n            .forEach(item => {\r\n                arrayInputs.push(\r\n                    <span>{item},\r\n                    </span>\r\n                )\r\n            })\r\n\r\n        return !this.state.isError ? ( <div>\r\n            <p>Input Array :: [ {arrayInputs}]</p>\r\n            <table className=\"table table-light table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Country code</th>\r\n                        <th scope=\"col\">City Name</th>\r\n                        <th scope=\"col\">Weather Status</th>\r\n                        <th scope=\"col\">Temperature</th>\r\n                        <th scope=\"col\">Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {reportsRows}\r\n                </tbody>\r\n            </table>\r\n        </div>):(<div className='alert alert-warning'>Something went wrong Please try again</div>)\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport WhetherReport from './components/weather-report';\nfunction App() {\n  return (\n   <div className='App'>\n   <div className='App-header'>\n  <h1>Invisible Test</h1> \n   <WhetherReport></WhetherReport>\n   </div>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}